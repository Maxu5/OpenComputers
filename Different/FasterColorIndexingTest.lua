PALETTE = {
    0x000000, 0x000040, 0x000080, 0x0000BF, 0x0000FF, 0x002400, 0x002440, 0x002480, 
    0x0024BF, 0x0024FF, 0x004900, 0x004940, 0x004980, 0x0049BF, 0x0049FF, 0x006D00, 
    0x006D40, 0x006D80, 0x006DBF, 0x006DFF, 0x009200, 0x009240, 0x009280, 0x0092BF, 
    0x0092FF, 0x00B600, 0x00B640, 0x00B680, 0x00B6BF, 0x00B6FF, 0x00DB00, 0x00DB40, 
    0x00DB80, 0x00DBBF, 0x00DBFF, 0x00FF00, 0x00FF40, 0x00FF80, 0x00FFBF, 0x00FFFF, 
    0x0F0F0F, 0x1E1E1E, 0x2D2D2D, 0x330000, 0x330040, 0x330080, 0x3300BF, 0x3300FF, 
    0x332400, 0x332440, 0x332480, 0x3324BF, 0x3324FF, 0x334900, 0x334940, 0x334980, 
    0x3349BF, 0x3349FF, 0x336D00, 0x336D40, 0x336D80, 0x336DBF, 0x336DFF, 0x339200, 
    0x339240, 0x339280, 0x3392BF, 0x3392FF, 0x33B600, 0x33B640, 0x33B680, 0x33B6BF, 
    0x33B6FF, 0x33DB00, 0x33DB40, 0x33DB80, 0x33DBBF, 0x33DBFF, 0x33FF00, 0x33FF40, 
    0x33FF80, 0x33FFBF, 0x33FFFF, 0x3C3C3C, 0x4B4B4B, 0x5A5A5A, 0x660000, 0x660040, 
    0x660080, 0x6600BF, 0x6600FF, 0x662400, 0x662440, 0x662480, 0x6624BF, 0x6624FF, 
    0x664900, 0x664940, 0x664980, 0x6649BF, 0x6649FF, 0x666D00, 0x666D40, 0x666D80, 
    0x666DBF, 0x666DFF, 0x669200, 0x669240, 0x669280, 0x6692BF, 0x6692FF, 0x66B600, 
    0x66B640, 0x66B680, 0x66B6BF, 0x66B6FF, 0x66DB00, 0x66DB40, 0x66DB80, 0x66DBBF, 
    0x66DBFF, 0x66FF00, 0x66FF40, 0x66FF80, 0x66FFBF, 0x66FFFF, 0x696969, 0x787878, 
    0x878787, 0x969696, 0x990000, 0x990040, 0x990080, 0x9900BF, 0x9900FF, 0x992400, 
    0x992440, 0x992480, 0x9924BF, 0x9924FF, 0x994900, 0x994940, 0x994980, 0x9949BF, 
    0x9949FF, 0x996D00, 0x996D40, 0x996D80, 0x996DBF, 0x996DFF, 0x999200, 0x999240, 
    0x999280, 0x9992BF, 0x9992FF, 0x99B600, 0x99B640, 0x99B680, 0x99B6BF, 0x99B6FF, 
    0x99DB00, 0x99DB40, 0x99DB80, 0x99DBBF, 0x99DBFF, 0x99FF00, 0x99FF40, 0x99FF80, 
    0x99FFBF, 0x99FFFF, 0xA5A5A5, 0xB4B4B4, 0xC3C3C3, 0xCC0000, 0xCC0040, 0xCC0080, 
    0xCC00BF, 0xCC00FF, 0xCC2400, 0xCC2440, 0xCC2480, 0xCC24BF, 0xCC24FF, 0xCC4900, 
    0xCC4940, 0xCC4980, 0xCC49BF, 0xCC49FF, 0xCC6D00, 0xCC6D40, 0xCC6D80, 0xCC6DBF, 
    0xCC6DFF, 0xCC9200, 0xCC9240, 0xCC9280, 0xCC92BF, 0xCC92FF, 0xCCB600, 0xCCB640, 
    0xCCB680, 0xCCB6BF, 0xCCB6FF, 0xCCDB00, 0xCCDB40, 0xCCDB80, 0xCCDBBF, 0xCCDBFF, 
    0xCCFF00, 0xCCFF40, 0xCCFF80, 0xCCFFBF, 0xCCFFFF, 0xD2D2D2, 0xE1E1E1, 0xF0F0F0, 
    0xFF0000, 0xFF0040, 0xFF0080, 0xFF00BF, 0xFF00FF, 0xFF2400, 0xFF2440, 0xFF2480, 
    0xFF24BF, 0xFF24FF, 0xFF4900, 0xFF4940, 0xFF4980, 0xFF49BF, 0xFF49FF, 0xFF6D00, 
    0xFF6D40, 0xFF6D80, 0xFF6DBF, 0xFF6DFF, 0xFF9200, 0xFF9240, 0xFF9280, 0xFF92BF, 
    0xFF92FF, 0xFFB600, 0xFFB640, 0xFFB680, 0xFFB6BF, 0xFFB6FF, 0xFFDB00, 0xFFDB40, 
    0xFFDB80, 0xFFDBBF, 0xFFDBFF, 0xFFFF00, 0xFFFF40, 0xFFFF80, 0xFFFFBF, 0xFFFFFF
}

PP_GRAY = {
    0, 40, 41, 42, 83, 84, 85, 126, 127, 128, 129, 170, 171, 172, 213, 214, 215, 255
}

PP_RED = {
    0, 43, 86, 130, 173, 216
}
----------------------------------------------------------
local closestIndex, delta, deltaR1, deltaG1, deltaB1, deltaR2, deltaG2, deltaB2, R8, G8, B8, Gr8, R, G, B, index1, index2, temp
----------------------------------------------------------
local function fast(color)
    R, G, B = color // 0x10000, color // 0x100 % 0x100, color % 0x100
    Gr8 = (R + G + B + 22.5) // 45 + 1
    R8 = (R + 25.5) // 51 + 1
    G8 = (G + 17.9) // 36.4285
    B8 = (B + 31.4) // 63.75 + 1
    index1 = PP_GRAY[Gr8] + 1
    index2 = PP_RED[R8] + 5 * G8 + B8
    --Необязательное условие (нужно в случае необходимости полного соответствия с slow функцией){
    if index1 < index2 then
        temp = index2
        index2 = index1
        index1 = temp
    end
    --}
    deltaR1 = PALETTE[index1] // 0x10000 - R
    deltaG1 = PALETTE[index1] // 0x100 % 0x100 - G
    deltaB1 = PALETTE[index1] % 0x100 - B
    delta = deltaR1 * deltaR1 + deltaG1 * deltaG1 + deltaB1 * deltaB1
    deltaR2 = PALETTE[index2] // 0x10000 - R
    deltaG2 = PALETTE[index2] // 0x100 % 0x100 - G
    deltaB2 = PALETTE[index2] % 0x100 - B
    if delta < deltaR2 * deltaR2 + deltaG2 * deltaG2 + deltaB2 * deltaB2 then
        return index1 - 1
    else
        return index2 - 1
    end
end
local function slow(color)
    R, G, B = color // 0x10000, color // 0x100 % 0x100, color % 0x100
    closestIndex = 1
    closestDelta = 1234567
    for i = 1, #PALETTE do
        deltaR = PALETTE[i] // 0x10000 - R
        deltaG = PALETTE[i] // 0x100 % 0x100 - G
        deltaB = PALETTE[i] % 0x100 - B

        delta = deltaR * deltaR + deltaG * deltaG + deltaB * deltaB

        if delta < closestDelta then
            closestDelta = delta
            closestIndex = i
        end
    end
    return closestIndex - 1
end
--[[Проверка на соответствие двух функций
local i, ans
for i = 0, 5000 do
    color = math.random(16777215)
    ans = slow(color)
    if ans ~= fast(color) then
        io.write(string.format("%x", PALETTE[ans + 1]) .. ":" .. 
            string.format("%x", PALETTE[fast(color) + 1]) .. ":" .. 
            string.format("%x", color).. "    ")
    end
    if i % 1000 == 0 then
        os.sleep(0) 
    end
end
os.sleep(0) ]]
local prev = os.clock()
for i = 1, 1000 do
    slow(i)
end
print("Медленная фунеция выполняется за: " .. (os.clock() - prev) .. " миллисекунд")
os.sleep(0)

prev = os.clock()
for i = 1, 1000 do
    fast(i)
end
print("Быстрая фунеция выполняется за: " .. (os.clock() - prev) .. " миллисекунд")
